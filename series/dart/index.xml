<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dart on Tech-ZenoChien</title>
    <link>chuaco/series/dart/</link>
    <description>Recent content in Dart on Tech-ZenoChien</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="chuaco/series/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dart - Use late allocation if possible</title>
      <link>chuaco/vn/posts/dart-late-keyword/</link>
      <pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate>
      <guid>chuaco/vn/posts/dart-late-keyword/</guid>
      <description>Dart v2.9 added the late modifier on variables.&#xA;When Null Safety is enabled, it is sometimes necessary to explicitly state that we will initialize a non-null variable later. Dart cannot always assume that a variable will be initialized later, as in the case of high-level variables. The following example would throw an error in Dart.&#xA;This can be used in the following two cases.&#xA;Late assign: promise to assign later</description>
    </item>
    <item>
      <title>`http_status` Dart Package: A Comprehensive Guide</title>
      <link>chuaco/vn/posts/dart-http_status-package/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <guid>chuaco/vn/posts/dart-http_status-package/</guid>
      <description>http_status Dart Package: A Comprehensive Guide&#xD;Link to heading&#xD;Description&#xD;Link to heading&#xD;Constants: http_status provides convenient static constants representing all HTTP status codes defined in RFC 1945 (HTTP/1.0), RFC 2616 (HTTP/1.1), and RFC 2518 (WebDAV). Clarity: Each constant offers a clear name (e.g., ok, notFound, forbidden), making it easy to understand the meaning of a status code at a glance. Information: Constants also provide a concise description of the status code, which can be helpful in debugging or understanding API responses.</description>
    </item>
    <item>
      <title>`http_status` Dart Package: A Comprehensive Guide</title>
      <link>chuaco/posts/dart-http_status-package/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      <guid>chuaco/posts/dart-http_status-package/</guid>
      <description>http_status Dart Package: A Comprehensive Guide&#xD;Link to heading&#xD;Description&#xD;Link to heading&#xD;Constants: http_status provides convenient static constants representing all HTTP status codes defined in RFC 1945 (HTTP/1.0), RFC 2616 (HTTP/1.1), and RFC 2518 (WebDAV). Clarity: Each constant offers a clear name (e.g., ok, notFound, forbidden), making it easy to understand the meaning of a status code at a glance. Information: Constants also provide a concise description of the status code, which can be helpful in debugging or understanding API responses.</description>
    </item>
    <item>
      <title>`http_status` Paquete de Dart: Una Guía Completa</title>
      <link>chuaco/posts/dart-http_status-package/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      <guid>chuaco/posts/dart-http_status-package/</guid>
      <description>http_status Paquete de Dart: Una Guía Completa&#xD;Link to heading&#xD;Descripción&#xD;Link to heading&#xD;Constantes: http_status proporciona constantes estáticas que representan todos los códigos de estado HTTP definidos en RFC 1945 (HTTP/1.0), RFC 2616 (HTTP/1.1), y RFC 2518 (WebDAV). Claridad: Cada constante ofrece un nombre claro (por ejemplo, ok, notFound, forbidden), facilitando la comprensión del significado de un código de estado de un vistazo. Información: Las constantes también ofrecen una descripción concisa del código de estado, que puede ser útil para depurar o entender las respuestas de la API.</description>
    </item>
    <item>
      <title>Dart - En lo posible utilice la asignación tardía</title>
      <link>chuaco/posts/dart-late-keyword/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>chuaco/posts/dart-late-keyword/</guid>
      <description>Dart v2.9 añadió el modificador late en las variables.&#xA;Cuando Null Safety está activado, en algunas ocasiones es necesario indicar explícitamente que inicializaremos una variable no nula posteriormente. Dart no siempre puede asumir que una variable será inicializada más adelante, como en el caso de las variables de alto nivel. El siguiente ejemplo arrojaría un error en Dart.&#xA;Esto puede ser usado en los siguientes dos casos.&#xA;Late assign: promesa de asignación más tarde</description>
    </item>
    <item>
      <title>Dart - Use late allocation if possible</title>
      <link>chuaco/posts/dart-late-keyword/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>chuaco/posts/dart-late-keyword/</guid>
      <description>Dart v2.9 added the late modifier on variables.&#xA;When Null Safety is enabled, it is sometimes necessary to explicitly state that we will initialize a non-null variable later. Dart cannot always assume that a variable will be initialized later, as in the case of high-level variables. The following example would throw an error in Dart.&#xA;This can be used in the following two cases.&#xA;Late assign: promise to assign later</description>
    </item>
  </channel>
</rss>
